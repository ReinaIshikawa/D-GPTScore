import os
import sys
import argparse
from openpyxl import Workbook
from openpyxl.drawing.image import Image
from openpyxl.styles import Alignment, PatternFill, Font
import random
from PIL import Image as PILImage
from io import BytesIO

from sklearn.base import config_context
sys.path.append(os.path.abspath(os.getcwd()))
from data_loader.prompt_loader import DataLoader, load_yaml_config
from evaluation.utils.eval_utils import get_gen_output_path

# python evaluation/user_study/user_study_1_write.py --num 1

INSTRUCTION = """We present images generated by AI.
Each image was created based on reference images and a text prompt (i.e., an instruction to generate the image).

Please evaluate each image and assign a score on a scale from 1 to 10 based on intuitive preference, paying attention to whether the characteristics of the individuals in the reference images (including clothing, etc.) are preserved and whether the generated image follows the text prompt.

AIによって生成された画像を示します。 各画像は、参照画像とテキストプロンプト（画像を生成するための指示文）に基づいて作成されたものです。

直感的な好みに基づいて各画像を評価し、1から10のスケールで点数を付けてください。評価の際には、参照画像における人物の特徴（服装など）がどの程度保持されているか、および生成された画像がテキストプロンプトに従っているかも考慮してください。"""

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--yaml_path', type=str, default="./eval_config.yaml")
    parser.add_argument('--num', type=int, default=0)
    args = parser.parse_args()
    
    config = load_yaml_config(yaml_path=args.yaml_path)
    csv_path = os.path.join(config["dir"],config["csv_file"])
    bg_path = os.path.join(config["dir"],config["bg_file"])
    dataloader = DataLoader(
        csv_path = csv_path,
        bg_path = bg_path,
        surrounings_type = config["surrounings_type"], 
        man_token = config["man_token"], 
        woman_token = config["woman_token"], 
        debug = config["debug"]
    )

    gen_method_list = config["gen_method_list"]
    prompt_type_list = config["prompt_type_list"]
    mode_list = config["mode_list"]

    output_dir = os.path.join(
        config["results_dir"], 
        "user_study"
    )

    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, f"userStudy_{args.num}.xlsx")


    def add_image(im_path, im_row, im_col):
        with PILImage.open(im_path) as img:
            img_resized = img.resize((256, 256))
            img_byte_arr = BytesIO()
            img_resized.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            img_to_insert = Image(img_byte_arr)
            img_to_insert.width = 300
            img_to_insert.height = 300
            cell = ws1.cell(row=im_row, column=im_col) 
            ws1.add_image(img_to_insert, cell.coordinate)
        column_letter = chr(64 + im_col)
        ws1.column_dimensions[column_letter].width = 45 
        ws1.row_dimensions[im_row].height = 232 

    def add_text_ws1(txt, tex_row, tex_col, wrap_text=False,horizontal="right", vertical="top"):
        ws1.cell(row=tex_row, column=tex_col).value = txt 
        ws1.cell(row=tex_row, column=tex_col).alignment = Alignment(wrap_text=wrap_text,horizontal=horizontal, vertical=vertical)

    def add_text_ws2(txt, tex_row, tex_col, wrap_text=False):
        ws2.cell(row=tex_row, column=tex_col).value = txt 
        ws2.cell(row=tex_row, column=tex_col).alignment = Alignment(wrap_text=wrap_text) 
    
    def add_color(color_row, color_col):
        fill = PatternFill(start_color="FFFACD", end_color="FFFACD", fill_type="solid")
        ws1.cell(row=color_row, column=color_col).fill = fill 

    
    wb = Workbook()
    if wb.active is None:
        ws1 = wb.create_sheet(title="Sheet1")
    else:
        ws1 = wb.active
    ws1.title = "Sheet1"
    ws2 = wb.create_sheet(title="Sheet2")
    ws1.merge_cells('A2:G2')
    
    # add instruction
    add_text_ws1(INSTRUCTION, 2, 1, True, "left", "top")
    ws1.cell(row=2, column=1).font = Font(size=18)
    ws1.cell(row=2, column=1).fill =PatternFill(start_color="DCE6F1", end_color="DCE6F1", fill_type="solid")
    ws1.column_dimensions['A'].width = 36.5
    ws1.row_dimensions[2].height = 250

    row_counter = 4

    for mode in mode_list:
    
        index_list = list(range(dataloader.get_len_of_data(mode)))
        if mode == "easy":
            seed_ = 111
        if mode == "medium":
            seed_ = 123
        if mode == "hard":
            seed_ = 234
        random.seed(seed_)
        random.shuffle(index_list)
        random.seed()
        
        for i, idx in enumerate(index_list):
            prompt_idx = i % len(prompt_type_list)
            prompt_type =prompt_type_list[prompt_idx]
            print("===============")
            print(f"mode:{mode} / prompt_type:{prompt_type}")

            prompt_info = dataloader.get_idx_info(mode, prompt_type, idx)
            print(prompt_info)
            id_ = prompt_info["id"]
            prompt_token = prompt_info["prompt_token"]

            add_text_ws1(prompt_token, row_counter, 1,True,"left","center")

            saved_dirs_cpy = gen_method_list
            random.shuffle(saved_dirs_cpy)
            for sdi, sd in enumerate(saved_dirs_cpy):
                generated_img_path = get_gen_output_path(
                    config["gen_output_dir"], 
                    sd, 
                    mode, 
                    prompt_type, 
                    id_
                )
                add_image(generated_img_path, row_counter, 2+sdi)
                add_color(row_counter+1, 2+sdi)
                add_text_ws2(sd, row_counter, 2+sdi, False)
                add_text_ws2(f"{mode}_{prompt_type}_{id_}", row_counter, 1, False)
            add_text_ws1("Score:", row_counter+1, 1, True, "right", "center")
            row_counter += 4
            

            if i == 39:
                break

    wb.save(output_path)
    print(f"User study data saved to {output_path}")